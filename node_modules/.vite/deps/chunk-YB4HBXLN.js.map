{
  "version": 3,
  "sources": ["../../.pnpm/effector@22.8.0/node_modules/effector/effector/collection.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/throw.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/region.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createNode.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/tag.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/kernel.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/naming.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/config.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/template.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createUnit.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/combine.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/defer.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createEffect.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/attach.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createApi.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createDomain.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fromObservable.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/merge.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/sample.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/guard.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/restore.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/split.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/allSettled.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/util.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/fork.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/createScope.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/hydrate.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/scopeBind.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/fork/serialize.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/createWatch.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/observable.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/getter.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/validate.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/id.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/own.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/is.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/caller.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/step.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/stateRef.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/clearNode.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/subscription.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/forward.ts", "../../.pnpm/effector@22.8.0/node_modules/effector/effector/watch.ts"],
  "sourcesContent": ["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n", "export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n", "import type {Template} from '../forest/index.h'\nimport type {NodeUnit, Node, ID} from './index.h'\nimport {getParent, getGraph} from './getter'\nimport {createNode} from './createNode'\n\ntype DeclarationSourceReporter = (\n  node: Node | 'region',\n  regionStack: RegionStack | null,\n) => void\n\nlet reporter: DeclarationSourceReporter\n\nexport const setGraphInspector = (fn: DeclarationSourceReporter) => {\n  reporter = fn\n}\n\ntype RegionStack = {\n  id: ID\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n  meta:\n    | Record<string, unknown>\n    | {\n        type: 'factory'\n        sid?: string\n        name?: string\n        loc: unknown\n        method?: string\n      }\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const reportDeclaration = (node: Node | 'region') => {\n  if (reporter) {\n    reporter(node, regionStack)\n  }\n}\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion<T = void>(unit: NodeUnit, cb: () => T): T {\n  const meta = getGraph(unit).meta || {}\n\n  regionStack = {\n    id: getGraph(unit).id,\n    parent: regionStack,\n    value: unit,\n    template: meta.template || readTemplate(),\n    sidRoot: meta.sidRoot || (regionStack && regionStack.sidRoot),\n    meta: meta,\n  }\n  try {\n    return cb()\n  } finally {\n    reportDeclaration('region')\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const factoryRootNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), sid, name, loc, method, type: 'factory'},\n  })\n\n  return withRegion(factoryRootNode, fn)\n}\n", "import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n", "export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n", "import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  failReason?: unknown\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\n/** Introspection api internals */\ntype Inspector = (stack: Stack, local: Local) => void\nlet inspector: Inspector\nexport const setInspector = (newInspector: Inspector) => {\n  inspector = newInspector\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (inspector) {\n      inspector(stack, local)\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: Scope,\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.values.sidMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.values.sidMap[sid])\n  } else if (ref.id in scope.values.idMap) {\n    ref.current = scope.values.idMap[ref.id]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n    local.failReason = err\n  }\n}\n", "import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n", "import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n", "import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n", "import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot, reportDeclaration} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(config.actualOp || EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  reportDeclaration(finalEvent.graphite)\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta: {\n      ...meta,\n      defaultState,\n    },\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>({\n      named: 'reinit',\n    })\n    store.reset(store.reinit)\n  }\n\n  reportDeclaration(store.graphite)\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n", "import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n", "import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n", "import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig: any = {},\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    {...maybeConfig, actualOp: EFFECT},\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_: any, stack) => {\n          let handler: Function = scope_.handler\n          const scope = getForkPage(stack)\n          if (scope) {\n            const scopeHandler = instance.sid\n              ? scope.handlers.sidMap[instance.sid]\n              : scope.handlers.unitMap.get(instance)\n            if (scopeHandler) handler = scopeHandler\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n", "import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n", "import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n", "import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n", "import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n", "import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n", "import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n", "import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n", "import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n", "import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n", "import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n", "import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node, Unit} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string | null) => void,\n  needSidlessStores: true,\n): void\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n): void\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n  needSidlessStores?: boolean,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE) {\n      if (needSidlessStores || getMeta(node, 'sid')) {\n        fn(node, getMeta(node, 'sid'))\n      }\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  const unitMap = new Map<Unit<any>, any>()\n  if (mapOrRecordValues instanceof Map) {\n    const sidMap = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      if (key.sid) {\n        assert(!(key.sid in sidMap), 'duplicate sid found')\n        sidMap[key.sid!] = value\n      } else {\n        unitMap.set(key, value)\n      }\n    })\n    return {sidMap, unitMap}\n  }\n  return {sidMap: mapOrRecordValues, unitMap}\n}\n", "import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope, Store} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const {sidMap, unitMap} = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.values.sidMap, sidMap)\n      forEach(unitMap, (value, unit) => {\n        scope.values.idMap[(unit as Store<any>).stateRef.id] = value\n      })\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n", "import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.values.sidMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    values: {sidMap: {}, idMap: {}},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {sidMap: {}, unitMap: new Map()},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n", "import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap, Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const {sidMap, unitMap} = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(sidMap)\n  const storesRefIdMap: Record<string, Store<any>> = {}\n  forEach(unitMap as unknown as Map<Store<any>, any>, (_, unit) => {\n    storesRefIdMap[unit.stateRef.id] = unit\n  })\n  // Array.from(unitMap.keys(),\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(\n    traverseTarget!,\n    (node, sid) => {\n      // forkPage.sidIdMap[sid] = node.scope.state.id\n      if (sid && includes(valuesSidList, sid)) {\n        add(storeNodes, node)\n        const serializer = getMeta(node, 'serialize')\n        if (serializer && serializer !== 'ignore') {\n          sidMap[sid] = serializer.read(sidMap[sid])\n        }\n        add(storeValues, sidMap[sid])\n      } else if (node.scope.state.id in storesRefIdMap) {\n        add(storeNodes, node)\n        add(storeValues, unitMap.get(storesRefIdMap[node.scope.state.id]))\n      }\n    },\n    true,\n  )\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.values.sidMap, sidMap)\n  }\n}\n", "import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n", "import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.values.sidMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n", "import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n", "export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n", "import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n", "import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n", "const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n", "import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n", "export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n", "import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n", "import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n", "import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n", "import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n", "import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n", "import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n", "import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n"],
  "mappings": "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",
  "names": ["forIn", "obj", "cb", "key", "forEach", "list", "fn", "assert", "condition", "message", "Error", "withRegion", "unit", "meta", "getGraph", "regionStack", "id", "parent", "value", "template", "readTemplate", "sidRoot", "reportDeclaration", "getParent", "createNode", "node", "from", "source", "to", "target", "child", "scope", "family", "familyRaw", "type", "regional", "sources", "arrifyNodes", "links", "owners", "seq", "item", "add", "result", "nextNodeID", "next", "link", "getOwners", "owner", "getLinks", "own", "getValue", "launch", "payload", "upsert", "pageForLaunch", "currentPage", "stackForLaunch", "forkPageForLaunch", "forkPage", "params", "defer", "page", "getForkPage", "Array", "isArray", "i", "length", "pushFirstHeapItem", "isRoot", "stop", "skip", "reg", "lastStartedState", "isWatch", "isPure", "kernelLoop", "deleteMin", "idx", "stack", "hasPageReg", "hasScopeReg", "local", "fail", "stepn", "step", "order", "priority", "barrierID", "fullID", "barriers", "has", "pushHeap", "delete", "data", "STACK", "store", "pageForRef", "getPageForRef", "initRefInScope", "softRead", "undefined", "readRef", "getPageRef", "current", "getMeta", "pure", "computationResult", "safe", "tryRun", "filter", "inspector", "finalValue", "nextNode", "fxCount", "storeChange", "warnSerializeNode", "additionalLinks", "unitObjectName", "objOrArr", "method", "name", "comma", "is", "getCompositeName", "fullName", "toString", "setStoreName", "rawName", "shortName", "Object", "assign", "createName", "path", "composite", "concat", "processArgsToConfig", "args", "singleArgument", "rawConfig", "assertObject", "metadata", "or", "childConfig", "and", "unwrappedNestedValue", "isObject", "nested", "applyTemplate", "handlers", "createEvent", "nameOrConfig", "maybeConfig", "config", "flattenConfig", "event", "deprecate", "oldPage", "setCurrentPage", "create", "finalEvent", "graphite", "initUnit", "actualOp", "watch", "watchUnit", "map", "deriveEvent", "MAP", "userFnCall", "callStack", "filterMap", "calc", "isVoid", "prepend", "contramapped", "createLinkNode", "applyParentHook", "domain", "hooks", "on", "methodName", "nodeSet", "assertNodeSet", "isFunction", "trigger", "off", "getSubscribers", "set", "createSubscription", "updateStore", "callARegStack", "createStore", "defaultState", "props", "plainState", "createStateRef", "updates", "named", "derived", "plainStateId", "subscribers", "Map", "stateRef", "getState", "reachedPage", "targetRef", "setState", "state", "reset", "units", "currentSubscription", "get", "firstState", "lastResult", "storeState", "innerStore", "linkNode", "callStackAReg", "addRefOp", "getStoreState", "noInit", "eventOrFn", "subscription", "updateFilter", "defaultConfig", "upd", "_", "b", "read", "a", "mov", "serializeMeta", "ignored", "customSerialize", "sid", "setMeta", "serialize", "reinit", "combine", "handler", "stores", "structStoreShape", "shapeReady", "noArraySpread", "rawHandler", "slice", "storeCombination", "createStoreObject", "createDefer", "req", "Promise", "rs", "rj", "catch", "createEffect", "instance", "kind", "use", "runner", "getCurrent", "anyway", "finally", "done", "status", "error", "doneData", "failData", "getType", "scope_", "scopeHandler", "sidMap", "unitMap", "scopeRef", "createScopeRef", "onResolve", "onSettled", "onReject", "ok", "runFn", "then", "op", "fx", "fxID", "nextEffectID", "savedFork", "setForkPage", "inFlight", "x", "pending", "amount", "effect", "attach", "injected", "mapParams", "attached", "runnerSteps", "runnerFnStep", "computedParams", "sourceData", "isEffectHandler", "splice", "parentDomain", "createApi", "setters", "createDomain", "history", "Event", "Effect", "Store", "Domain", "factory", "tag", "lowerCaseTag", "toLowerCase", "onCreateUnit", "Set", "ownerSet", "hook", "fromObservable", "observable", "observableItem", "observableSymbol", "subscribe", "disposer", "complete", "merge", "validateSampleConfig", "atLeastOneFieldExists", "sampleConfigFields", "field", "fieldErrorMessage", "sample", "clock", "batched", "greedy", "createSampling", "guard", "restore", "split", "targets", "METHOD", "match", "configForm", "cases", "matchIsUnit", "matchIsFunction", "matchIsShape", "assertTarget", "__", "splitterSeq", "values", "caseNames", "keys", "compute", "scopeTargets", "String", "launchCase", "includes", "lastValues", "needBarrier", "storeOrFn", "updater", "storeRef", "caseName", "splitterNode", "allSettled", "start", "ctx", "reject", "parentFork", "defers", "launchUnits", "launchParams", "traverseStores", "root", "needSidlessStores", "visit", "normalizeValues", "assertEach", "mapOrRecordValues", "fork", "domainOrConfig", "optionalConfig", "forkInFlightCounter", "batch", "resolve", "storeStack", "storeNode", "sidIdMap", "sidSerializeSettings", "ignore", "write", "warnSerialize", "resultScope", "cloneOf", "idMap", "activeEffects", "oldScope", "ref", "fromSerialize", "hydrate", "valuesSidList", "getOwnPropertyNames", "storesRefIdMap", "traverseTarget", "needToAssign", "storeNodes", "storeValues", "serializer", "scopeBind", "savedForkPage", "console", "ignoredStores", "serializeSettings", "noopSerializer", "onlyChanges", "createWatch", "run", "scopeLinks", "push", "indexOf", "clearNode", "callback", "unsubscribe", "Symbol", "graph", "val", "compositeName", "removeItem", "pos", "subject", "suggestion", "idCount", "reporter", "nextUnitID", "nextStepID", "setGraphInspector", "readSidRoot", "withFactory", "loc", "ownerUnit", "_link", "flat", "assertNodeSetItem", "valueName", "reason", "targetField", "cmd", "nextBarrierID", "isEffect", "toStack", "samplerPriority", "isFilter", "before", "heap", "ret", "v", "getPriority", "r", "l", "queue", "ix", "first", "last", "size", "bucket", "t", "newForkPage", "newPage", "isGetState", "setInspector", "newInspector", "noopParser", "sourceRef", "isKernelCall", "refsMap", "_sourceRef$meta", "isFresh", "err", "failReason", "part", "removeFromNode", "currentNode", "targetNode", "clearNodeNormalized", "deep", "isDomainUnit", "pop", "clearMap", "clear", "events", "effects", "domains", "scopeFn", "forward", "opts", "hookType", "isDomain", "unitId", "thru", "observer", "nativeTemplate", "mapped", "caller", "reader", "needSpread", "clone", "stateNew", "rawShape", "storeStateRef", "rawShapeReader", "c", "childRef", "defaultShape", "sidechain", "targetMayBeStore", "filterRequired", "isUpward", "sourceIsClock", "filterType", "clockState", "filterNodes", "filterRef", "hasFilter", "syncSourceState", "readAndFilter", "hasSource", "jointNode", "src", "joint", "isSourceStore"]
}
